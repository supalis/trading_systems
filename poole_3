package com.dukascopy.visualforex.supalis;

import java.util.*;
import com.dukascopy.api.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.concurrent.CopyOnWriteArrayList;
import java.lang.reflect.*;
import java.math.BigDecimal;


/*
 * Created by VisualJForex Generator, version 2.97
 * Date: 22.10.2020 14:14
 */
public class poole_3 implements IStrategy {

    private CopyOnWriteArrayList<TradeEventAction> tradeEventActions = new CopyOnWriteArrayList<TradeEventAction>();
    private static final String DATE_FORMAT_NOW = "yyyyMMdd_HHmmss";
    private IEngine engine;
    private IConsole console;
    private IHistory history;
    private IContext context;
    private IIndicators indicators;
    private IUserInterface userInterface;

    @Configurable("defaultTakeProfit:")
    public int defaultTakeProfit = 100;
    @Configurable("defaultInstrument:")
    public Instrument defaultInstrument = Instrument.EURUSD;
    @Configurable("defaultSlippage:")
    public int defaultSlippage = 5;
    @Configurable("defaultTradeAmount:")
    public double defaultTradeAmount = 0.01;
    @Configurable("defaultStopLoss:")
    public int defaultStopLoss = 100;
    @Configurable("defaultPeriod:")
    public Period defaultPeriod = Period.FIFTEEN_MINS;

    private Candle LastBidCandle =  null ;
    private String AccountId = "";
    private int _sells_amount;
    private double _bullp;
    private double Equity;
    private Tick LastTick =  null ;
    private String AccountCurrency = "";
    private double _bearp;
    private int OverWeekendEndLeverage;
    private int _buys_amount;
    private double Leverage;
    private List<IOrder> PendingPositions =  null ;
    private IOrder _my_position =  null ;
    private List<IOrder> OpenPositions =  null ;
    private double UseofLeverage;
    private IMessage LastTradeEvent =  null ;
    private boolean GlobalAccount;
    private Candle LastAskCandle =  null ;
    private int MarginCutLevel;
    private List<IOrder> AllPositions =  null ;


    public void onStart(IContext context) throws JFException {
        this.engine = context.getEngine();
        this.console = context.getConsole();
        this.history = context.getHistory();
        this.context = context;
        this.indicators = context.getIndicators();
        this.userInterface = context.getUserInterface();

        subscriptionInstrumentCheck(defaultInstrument);

        ITick lastITick = context.getHistory().getLastTick(defaultInstrument);
        LastTick = new Tick(lastITick, defaultInstrument);

        IBar bidBar = context.getHistory().getBar(defaultInstrument, defaultPeriod, OfferSide.BID, 1);
        IBar askBar = context.getHistory().getBar(defaultInstrument, defaultPeriod, OfferSide.ASK, 1);
        LastAskCandle = new Candle(askBar, defaultPeriod, defaultInstrument, OfferSide.ASK);
        LastBidCandle = new Candle(bidBar, defaultPeriod, defaultInstrument, OfferSide.BID);

        if (indicators.getIndicator("BULLP") == null) {
            indicators.registerDownloadableIndicator("1274","BULLP");
        }
        if (indicators.getIndicator("BEARP") == null) {
            indicators.registerDownloadableIndicator("1272","BEARP");
        }
        subscriptionInstrumentCheck(Instrument.fromString("EUR/USD"));

    }

    public void onAccount(IAccount account) throws JFException {
        AccountCurrency = account.getCurrency().toString();
        Leverage = account.getLeverage();
        AccountId= account.getAccountId();
        Equity = account.getEquity();
        UseofLeverage = account.getUseOfLeverage();
        OverWeekendEndLeverage = account.getOverWeekEndLeverage();
        MarginCutLevel = account.getMarginCutLevel();
        GlobalAccount = account.isGlobal();
    }

    private void updateVariables(Instrument instrument) {
        try {
            AllPositions = engine.getOrders();
            List<IOrder> listMarket = new ArrayList<IOrder>();
            for (IOrder order: AllPositions) {
                if (order.getState().equals(IOrder.State.FILLED)){
                    listMarket.add(order);
                }
            }
            List<IOrder> listPending = new ArrayList<IOrder>();
            for (IOrder order: AllPositions) {
                if (order.getState().equals(IOrder.State.OPENED)){
                    listPending.add(order);
                }
            }
            OpenPositions = listMarket;
            PendingPositions = listPending;
        } catch(JFException e) {
            e.printStackTrace();
        }
    }

    public void onMessage(IMessage message) throws JFException {
        if (message.getOrder() != null) {
            updateVariables(message.getOrder().getInstrument());
            LastTradeEvent = message;
            for (TradeEventAction event :  tradeEventActions) {
                IOrder order = message.getOrder();
                if (order != null && event != null && message.getType().equals(event.getMessageType())&& order.getLabel().equals(event.getPositionLabel())) {
                    Method method;
                    try {
                        method = this.getClass().getDeclaredMethod(event.getNextBlockId(), Integer.class);
                        method.invoke(this, new Integer[] {event.getFlowId()});
                    } catch (SecurityException e) {
                            e.printStackTrace();
                    } catch (NoSuchMethodException e) {
                          e.printStackTrace();
                    } catch (IllegalArgumentException e) {
                        e.printStackTrace();
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    } catch (InvocationTargetException e) {
                        e.printStackTrace();
                    } 
                    tradeEventActions.remove(event); 
                }
            }   
        }
    }

    public void onStop() throws JFException {
    }

    public void onTick(Instrument instrument, ITick tick) throws JFException {
        LastTick = new Tick(tick, instrument);
        updateVariables(instrument);


    }

    public void onBar(Instrument instrument, Period period, IBar askBar, IBar bidBar) throws JFException {
        LastAskCandle = new Candle(askBar, period, instrument, OfferSide.ASK);
        LastBidCandle = new Candle(bidBar, period, instrument, OfferSide.BID);
        updateVariables(instrument);
            If_block_69(1);

    }

    public void subscriptionInstrumentCheck(Instrument instrument) {
        try {
              Set<Instrument> instruments = new HashSet<Instrument>();
              instruments.add(instrument);
              context.setSubscribedInstruments(instruments, true);
          } catch (Exception e) {
              e.printStackTrace();
          }
        }

    public double round(double price, Instrument instrument) {
        BigDecimal big = new BigDecimal("" + price); 
        big = big.setScale(instrument.getPipScale() + 1, BigDecimal.ROUND_HALF_UP); 
        return big.doubleValue(); 
    }

    public ITick getLastTick(Instrument instrument) {
        try { 
            return (context.getHistory().getTick(instrument, 0)); 
        } catch (JFException e) { 
             e.printStackTrace();  
         } 
         return null; 
    }

    private  void If_block_23(Integer flow) {
        Instrument argument_1 = defaultInstrument;
        Instrument argument_2 = LastBidCandle.getInstrument();
        if (argument_1 == null && argument_2 !=null || (argument_1!= null && !argument_1.equals(argument_2))) {
        }
        else if (argument_1!= null && argument_1.equals(argument_2)) {
            Assign_block_34(flow);
        }
    }

    private  void PositionsViewer_block_31(Integer flow) {
        List<IOrder> argument_1 = OpenPositions;
        for (IOrder order : argument_1){
            if (order.getState() == IOrder.State.OPENED||order.getState() == IOrder.State.FILLED){
                _my_position = order;
                If_block_32(flow);
            }
        }
        MultipleAction_block_70(flow);
    }

    private  void If_block_32(Integer flow) {
        boolean argument_1 = _my_position.isLong();
        boolean argument_2 = true;
        if (argument_1!= argument_2) {
            Calculation_block_77(flow);
        }
        else if (argument_1 == argument_2) {
            Calculation_block_78(flow);
        }
    }

    private  void Assign_block_34(Integer flow) {
        int argument_1 = 0;
        _sells_amount =  argument_1;
            Assign_block_35(flow);
    }

    private  void Assign_block_35(Integer flow) {
        int argument_1 = 0;
        _buys_amount =  argument_1;
            PositionsViewer_block_31(flow);
    }

    private void BULLP_block_49(Integer flow) {
        Instrument argument_1 = defaultInstrument;
        Period argument_2 = defaultPeriod;
        int argument_3 = 1;
        int argument_4 = 13;
        OfferSide[] offerside = new OfferSide[1];
        IIndicators.AppliedPrice[] appliedPrice = new IIndicators.AppliedPrice[1];
        offerside[0] = OfferSide.BID;
        appliedPrice[0] = IIndicators.AppliedPrice.CLOSE;
        Object[] params = new Object[1];
        params[0] = 13;
        try {
            subscriptionInstrumentCheck(argument_1);
            long time = context.getHistory().getBar(argument_1, argument_2, OfferSide.BID, argument_3).getTime();
            Object[] indicatorResult = context.getIndicators().calculateIndicator(argument_1, argument_2, offerside,
                    "BULLP", appliedPrice, params, Filter.WEEKENDS, 1, time, 0);
            if ((new Double(((double [])indicatorResult[0])[0])) == null) {
                this._bullp = Double.NaN;
            } else { 
                this._bullp = (((double [])indicatorResult[0])[0]);
            } 
        If_block_51(flow);
        } catch (JFException e) {
            e.printStackTrace();
            console.getErr().println(e);
            this._bullp = Double.NaN;
        }
    }

    private void BEARP_block_50(Integer flow) {
        Instrument argument_1 = defaultInstrument;
        Period argument_2 = defaultPeriod;
        int argument_3 = 1;
        int argument_4 = 13;
        OfferSide[] offerside = new OfferSide[1];
        IIndicators.AppliedPrice[] appliedPrice = new IIndicators.AppliedPrice[1];
        offerside[0] = OfferSide.BID;
        appliedPrice[0] = IIndicators.AppliedPrice.CLOSE;
        Object[] params = new Object[1];
        params[0] = 13;
        try {
            subscriptionInstrumentCheck(argument_1);
            long time = context.getHistory().getBar(argument_1, argument_2, OfferSide.BID, argument_3).getTime();
            Object[] indicatorResult = context.getIndicators().calculateIndicator(argument_1, argument_2, offerside,
                    "BEARP", appliedPrice, params, Filter.WEEKENDS, 1, time, 0);
            if ((new Double(((double [])indicatorResult[0])[0])) == null) {
                this._bearp = Double.NaN;
            } else { 
                this._bearp = (((double [])indicatorResult[0])[0]);
            } 
        If_block_55(flow);
        } catch (JFException e) {
            e.printStackTrace();
            console.getErr().println(e);
            this._bearp = Double.NaN;
        }
    }

    private  void If_block_51(Integer flow) {
        double argument_1 = _bullp;
        double argument_2 = 0.0;
        if (argument_1< argument_2) {
            Calculation_block_53(flow);
        }
        else if (argument_1> argument_2) {
            MultipleAction_block_71(flow);
        }
        else if (argument_1== argument_2) {
            MultipleAction_block_71(flow);
        }
    }

    private void Calculation_block_53(Integer flow) {
        double argument_1 = _bullp;
        double argument_2 = -1.0;
        _bullp = argument_1 * argument_2;
        MultipleAction_block_71(flow);
    }

    private  void If_block_55(Integer flow) {
        double argument_1 = _bearp;
        double argument_2 = 0.0;
        if (argument_1< argument_2) {
            Calculation_block_56(flow);
        }
        else if (argument_1> argument_2) {
            MultipleAction_block_71(flow);
        }
        else if (argument_1== argument_2) {
            MultipleAction_block_71(flow);
        }
    }

    private void Calculation_block_56(Integer flow) {
        double argument_1 = _bearp;
        double argument_2 = -1.0;
        _bearp = argument_1 * argument_2;
        MultipleAction_block_71(flow);
    }

    private  void If_block_58(Integer flow) {
        double argument_1 = _bullp;
        double argument_2 = _bearp;
        if (argument_1< argument_2) {
            PositionsViewer_block_79(flow);
        }
        else if (argument_1> argument_2) {
            PositionsViewer_block_83(flow);
        }
        else if (argument_1== argument_2) {
        }
    }

    private  void OpenatMarket_block_59(Integer flow) {
        Instrument argument_1 = defaultInstrument;
        double argument_2 = defaultTradeAmount;
        int argument_3 = defaultSlippage;
        int argument_4 = defaultStopLoss;
        int argument_5 = defaultTakeProfit;
        String argument_6 = "";
        ITick tick = getLastTick(argument_1);

        IEngine.OrderCommand command = IEngine.OrderCommand.BUY;

        double stopLoss = tick.getBid() - argument_1.getPipValue() * argument_4;
        double takeProfit = round(tick.getBid() + argument_1.getPipValue() * argument_5, argument_1);
        
           try {
               String label = getLabel();           
               IOrder order = context.getEngine().submitOrder(label, argument_1, command, argument_2, 0, argument_3,  stopLoss, takeProfit, 0, argument_6);
                } catch (JFException e) {
            e.printStackTrace();
        }
    }

    private  void OpenatMarket_block_60(Integer flow) {
        Instrument argument_1 = defaultInstrument;
        double argument_2 = defaultTradeAmount;
        int argument_3 = defaultSlippage;
        int argument_4 = defaultStopLoss;
        int argument_5 = defaultTakeProfit;
        String argument_6 = "";
        ITick tick = getLastTick(argument_1);

        IEngine.OrderCommand command = IEngine.OrderCommand.SELL;

        double stopLoss = tick.getAsk() + argument_1.getPipValue() * argument_4;
        double takeProfit = round(tick.getAsk() - argument_1.getPipValue() * argument_5, argument_1);
        
           try {
               String label = getLabel();           
               IOrder order = context.getEngine().submitOrder(label, argument_1, command, argument_2, 0, argument_3,  stopLoss, takeProfit, 0, argument_6);
                } catch (JFException e) {
            e.printStackTrace();
        }
    }

    private  void CloseandCancelPosition_block_68(Integer flow) {
        try {
            if (_my_position != null && (_my_position.getState() == IOrder.State.OPENED||_my_position.getState() == IOrder.State.FILLED)){
                _my_position.close();
            }
        } catch (JFException e)  {
            e.printStackTrace();
        }
    }

    private  void If_block_69(Integer flow) {
        Period argument_1 = defaultPeriod;
        Period argument_2 = LastBidCandle.getPeriod();
        if (argument_1 == null && argument_2 !=null || (argument_1!= null && !argument_1.equals(argument_2))) {
        }
        else if (argument_1!= null && argument_1.equals(argument_2)) {
            If_block_23(flow);
        }
    }

    private  void MultipleAction_block_70(Integer flow) {
        BULLP_block_49(flow);
        BEARP_block_50(flow);
    }

    private  void MultipleAction_block_71(Integer flow) {
        If_block_58(flow);
    }

    private void Calculation_block_77(Integer flow) {
        int argument_1 = _sells_amount;
        int argument_2 = 1;
        _sells_amount = (int)(argument_1 + argument_2);
    }

    private void Calculation_block_78(Integer flow) {
        int argument_1 = _buys_amount;
        int argument_2 = 1;
        _buys_amount = (int)(argument_1 + argument_2);
    }

    private  void PositionsViewer_block_79(Integer flow) {
        List<IOrder> argument_1 = OpenPositions;
        for (IOrder order : argument_1){
            if (order.getState() == IOrder.State.OPENED||order.getState() == IOrder.State.FILLED){
                _my_position = order;
                If_block_80(flow);
            }
        }
        If_block_85(flow);
    }

    private  void If_block_80(Integer flow) {
        boolean argument_1 = _my_position.isLong();
        boolean argument_2 = true;
        if (argument_1!= argument_2) {
        }
        else if (argument_1 == argument_2) {
            CloseandCancelPosition_block_68(flow);
        }
    }

    private  void CloseandCancelPosition_block_81(Integer flow) {
        try {
            if (_my_position != null && (_my_position.getState() == IOrder.State.OPENED||_my_position.getState() == IOrder.State.FILLED)){
                _my_position.close();
            }
        } catch (JFException e)  {
            e.printStackTrace();
        }
    }

    private  void If_block_82(Integer flow) {
        boolean argument_1 = _my_position.isLong();
        boolean argument_2 = true;
        if (argument_1!= argument_2) {
            CloseandCancelPosition_block_81(flow);
        }
        else if (argument_1 == argument_2) {
        }
    }

    private  void PositionsViewer_block_83(Integer flow) {
        List<IOrder> argument_1 = OpenPositions;
        for (IOrder order : argument_1){
            if (order.getState() == IOrder.State.OPENED||order.getState() == IOrder.State.FILLED){
                _my_position = order;
                If_block_82(flow);
            }
        }
        If_block_84(flow);
    }

    private  void If_block_84(Integer flow) {
        int argument_1 = _buys_amount;
        int argument_2 = 0;
        if (argument_1< argument_2) {
        }
        else if (argument_1> argument_2) {
            OpenatMarket_block_59(flow);
        }
        else if (argument_1== argument_2) {
            OpenatMarket_block_59(flow);
        }
    }

    private  void If_block_85(Integer flow) {
        int argument_1 = _sells_amount;
        int argument_2 = 0;
        if (argument_1< argument_2) {
        }
        else if (argument_1> argument_2) {
            OpenatMarket_block_60(flow);
        }
        else if (argument_1== argument_2) {
            OpenatMarket_block_60(flow);
        }
    }

class Candle  {

    IBar bar;
    Period period;
    Instrument instrument;
    OfferSide offerSide;

    public Candle(IBar bar, Period period, Instrument instrument, OfferSide offerSide) {
        this.bar = bar;
        this.period = period;
        this.instrument = instrument;
        this.offerSide = offerSide;
    }

    public Period getPeriod() {
        return period;
    }

    public void setPeriod(Period period) {
        this.period = period;
    }

    public Instrument getInstrument() {
        return instrument;
    }

    public void setInstrument(Instrument instrument) {
        this.instrument = instrument;
    }

    public OfferSide getOfferSide() {
        return offerSide;
    }

    public void setOfferSide(OfferSide offerSide) {
        this.offerSide = offerSide;
    }

    public IBar getBar() {
        return bar;
    }

    public void setBar(IBar bar) {
        this.bar = bar;
    }

    public long getTime() {
        return bar.getTime();
    }

    public double getOpen() {
        return bar.getOpen();
    }

    public double getClose() {
        return bar.getClose();
    }

    public double getLow() {
        return bar.getLow();
    }

    public double getHigh() {
        return bar.getHigh();
    }

    public double getVolume() {
        return bar.getVolume();
    }
}
class Tick {

    private ITick tick;
    private Instrument instrument;

    public Tick(ITick tick, Instrument instrument){
        this.instrument = instrument;
        this.tick = tick;
    }

    public Instrument getInstrument(){
       return  instrument;
    }

    public double getAsk(){
       return  tick.getAsk();
    }

    public double getBid(){
       return  tick.getBid();
    }

    public double getAskVolume(){
       return  tick.getAskVolume();
    }

    public double getBidVolume(){
        return tick.getBidVolume();
    }

   public long getTime(){
       return  tick.getTime();
    }

   public ITick getTick(){
       return  tick;
    }
}

    protected String getLabel() {
        String label;
        label = "IVF" + getCurrentTime(LastTick.getTime()) + generateRandom(10000) + generateRandom(10000);
        return label;
    }

    private String getCurrentTime(long time) {
        SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT_NOW);
        return sdf.format(time);
    }

    private static String generateRandom(int n) {
        int randomNumber = (int) (Math.random() * n);
        String answer = "" + randomNumber;
        if (answer.length() > 3) {
            answer = answer.substring(0, 4);
        }
        return answer;
    }

    class TradeEventAction {
        private IMessage.Type messageType;
        private String nextBlockId = "";
        private String positionLabel = "";
        private int flowId = 0;

        public IMessage.Type getMessageType() {
            return messageType;
        }

        public void setMessageType(IMessage.Type messageType) {
            this.messageType = messageType;
        }

        public String getNextBlockId() {
            return nextBlockId;
        }

        public void setNextBlockId(String nextBlockId) {
            this.nextBlockId = nextBlockId;
        }
        public String getPositionLabel() {
            return positionLabel;
       }

        public void setPositionLabel(String positionLabel) {
            this.positionLabel = positionLabel;
        }
        public int getFlowId() {
            return flowId;
        }
        public void setFlowId(int flowId) {
            this.flowId = flowId;
        }
    }
}
